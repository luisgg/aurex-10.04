#!/bin/sh

set -e

# functions

die(){
	[ -z "$1" ] || echo "$1"
	exit 1
}

list_mirrors(){
	sed -ne  "/$SOURCES_REGEX/s%$SOURCES_REGEX%\1%p" "$@"
}

list_dists(){
	sed -ne  "/$SOURCES_REGEX/s%$SOURCES_REGEX%\2%p" "$@"
}

list_components(){
	sed -ne  "/$SOURCES_REGEX/s%$SOURCES_REGEX%\3%p" "$@" |tr " " "\n"
}

sed_rules(){
        for v in $(sed -ne "/^[^=]\+=/s%=.*$%%;p" ./aurex-meta.conf) ; do
                V="$(eval "echo $(eval "echo -n '$';echo -n $v")")"
                echo "s%_@_${v}_@_%${V}%g;"
        done
}

expand_variables(){
	sed_rules |sed -f - "$1" > "$2"
}

clean_sources(){
	expand_sources "" "clean"
}

expand_sources(){
	TARGET_DIR="$SOURCES_BASEDIR/"
	if [ "$1" ]; then
		TARGET_DIR="${1%/}/"
	fi
	# expand sources.list
	[ -d "$SOURCES_BASEDIR" ] || die

	if [ "$2" = "clean" ] ; then
		echo "clean sources.list templates"
	else
		echo "expand templates for sources.list"
	fi
	for f in $SOURCES_BASEDIR/*.in ; do
		if [ -r $f ] ; then
			F="${TARGET_DIR}$(basename "$f" ".in")"
			if [ "$2" = "clean" ] ; then
				rm -f "$F"
			else
				expand_variables "$f" "$F"
			fi
		fi
	done
}

expand_update_cfg(){
	# get mirror list and exceptions
	echo "get mirrors, dists and components"
	SOURCES_FILE="$(tempfile)"
	sed -ne "/$SOURCES_REGEX/p" $SOURCES_BASEDIR/*.list |sort -u > $SOURCES_FILE
	MIRROR_LIST="$(list_mirrors $SOURCES_FILE |sort -u)"
	DIST_LIST="$(list_dists $SOURCES_FILE |sort -u)"
	COMP_LIST="$(list_components $SOURCES_FILE |sort -u)"

	echo "get exceptions"
	EXCEPT_FILE="$(tempfile)"
	for m in $MIRROR_LIST ; do
		for d in $DIST_LIST ; do
			reg_ex="^deb[[:blank:]]\+$m[[:blank:]]\+$d"
			if grep -q "$reg_ex[[:blank:]]\+" $SOURCES_FILE; then
				for c in $COMP_LIST ; do
					if ! grep -q "${reg_ex}.*[[:blank:]]$c\([[:blank:]]\|$\)" "$SOURCES_FILE" ; then
						echo "${m%/}/,$d,$c" >> $EXCEPT_FILE
					fi
				done
			else
				echo "${m%/}/,$d" >> $EXCEPT_FILE
			fi
		done
	done
	ARCHIVE_URL_LIST="$UBUNTU_MIRROR"
	for m in $MIRROR_LIST; do
		[ "$m" = "$UBUNTU_MIRROR" ] || ARCHIVE_URL_LIST="$ARCHIVE_URL_LIST,${m%/}/"
	done

	ARCHIVE_EXCEPTIONS="$(cat "$EXCEPT_FILE" |tr "\n" " ")"

	rm $SOURCES_FILE $EXCEPT_FILE

	echo "expand update.cfg"
	expand_variables "update.cfg.in" "update.cfg"
}

update_seeds(){
	TMP_DIR="$(mktemp -d)"
	echo "Downloading seeds from launchpad ..."
	bzr branch $BZR_DIST $TMP_DIR/bzr-ubuntu.$CURRENT_DIST
	bzr branch $BZR_PLAT $TMP_DIR/bzr-platform.$CURRENT_DIST

	TIME_STAMP="$(date "+%Y%m%d-%H%M%S")"
	for d in ubuntu platform ; do
		rsync -axC $TMP_DIR/bzr-$d.$CURRENT_DIST/ $TMP_DIR/$d.$CURRENT_DIST/
		FIRST_TIME=""
		if [ ! -d "seeds/$d.$CURRENT_DIST" ] ; then
			mkdir -p "seeds/$d.$CURRENT_DIST"
			FIRST_TIME=Y
		fi
		rsync -axC seeds/$d.$CURRENT_DIST/ $TMP_DIR/current-$d.$CURRENT_DIST/
		if ! diff -qr $TMP_DIR/current-$d.$CURRENT_DIST $TMP_DIR/$d.$CURRENT_DIST  >/dev/null ; then
			if [ "$FIRST_TIME" ] ; then
				echo "$d.$CURRENT_DIST: No previous seeds found. Copying seeds for first time"
			else
				echo "$d.$CURRENT_DIST: Some changes detected. Updating local seeds ..."
				mkdir -p seeds/$d.$CURRENT_DIST.$TIME_STAMP
				rsync -axC seeds/$d.$CURRENT_DIST/ seeds/$d.$CURRENT_DIST.$TIME_STAMP/
				echo "$d.$CURRENT_DIST: OLD seeds stored in $d.$CURRENT_DIST.$TIME_STAMP as backup."
			fi
			rsync -axC --delete $TMP_DIR/$d.$CURRENT_DIST/ seeds/$d.$CURRENT_DIST/
			echo "$d.$CURRENT_DIST: updated."
		else
			echo "$d.$CURRENT_DIST: No changes found"
		fi
	done
	rm -fr $TMP_DIR
}

configure_sources(){
	expand_sources
	expand_update_cfg
}

configure_chroot(){
	TMP_DIR="$(mktemp -d)"
	cp $SOURCES_BASEDIR/*.list $TMP_DIR
	expand_sources "$TMP_DIR"
	TMP_SOURCES="$(tempfile)"
	cat $TMP_DIR/*.list > "$TMP_SOURCES"
	rm -rf "$TMP_DIR"
	CHROOT_SOURCES_LIST="$TMP_SOURCES"
}

test_debootstrap(){
	# TODO : ...
	[ -d "$CHROOT_DIR" ] && [ -x "$CHROOT_DIR/bin/sh" ] || die "Invalid debootstrap dir"
}

do_debootstrap(){
	rm -fr "$CHROOT_DIR"
	mkdir -p "$CHROOT_DIR"
	debootstrap "$CURRENT_DIST" "$CHROOT_DIR"
}

chroot_mounts(){
	mount --bind /dev "$CHROOT_DIR/dev"
	mount --bind /dev/pts "$CHROOT_DIR/dev/pts"
	mount --bind /proc/ "$CHROOT_DIR/proc"
	mount --bind /sys/ "$CHROOT_DIR/sys"

}

chroot_umounts(){
	umount "$CHROOT_DIR/dev/pts"
	umount "$CHROOT_DIR/dev"
	umount "$CHROOT_DIR/proc"
	umount "$CHROOT_DIR/sys"
}

prepare_chroot(){
	CHROOT_CMD="chroot $CHROOT_DIR "
	if [ "$CUSTOM_DEBOOTSTRAP_SOURCESLIST" ] && [ -r "$CUSTOM_DEBOOTSTRAP_SOURCESLIST" ] ; then
		CHROOT_SOURCES_LIST="$CUSTOM_DEBOOTSTRAP_SOURCESLIST"
	fi
	if [ "$CHROOT_SOURCES_LIST" ] && [ -r "$CHROOT_SOURCES_LIST" ] ; then
		echo "chroot: copy sources.list"
		cat "$CHROOT_SOURCES_LIST" > "$CHROOT_DIR/etc/apt/sources.list"
	fi
	if [ "$CUSTOM_DEBOOTSTRAP_COPY" ] && [ -d "$CUSTOM_DEBOOTSTRAP_COPY" ] ; then
		echo "chroot: copy custom files"
		rsync -axC "$CUSTOM_DEBOOTSTRAP_COPY/" "$CHROOT_DIR/"
	fi
	chroot_mounts
	CURRENT_LC_ALL="$LC_ALL"
	CURRENT_LANG="$LANG"
	export LC_ALL=C
	export LANG=C
	if [ "$CUSTOM_DEBOOTSTRAP_PKGS" ] ; then
		echo "chroot: install custom pkgs"
		$CHROOT_CMD apt-get update || true
		$CHROOT_CMD apt-get --allow-unauthenticated -y install "$CUSTOM_DEBOOTSTRAP_PKGS" || true
	fi
	if [ "$CUSTOM_DEBOOSTRAP_CMD" ] ; then
		echo "chroot: run custom cmd"
		$CHROOT_CMD $CUSTOM_DEBOOSTRAP_CMD || true
	fi
	echo "chroot: update & dist-upgrade"
	$CHROOT_CMD apt-get update || true 
	$CHROOT_CMD apt-get --allow-unauthenticated -y dist-upgrade || true
	$CHROOT_CMD dpkg -l |sed -ne "/^ii/s%\(^ii[[:blank:]]\+[^[:blank:]]\+[[:blank:]]\+[^[:blank:]]\+\).*$%\1%p" > $DEBOOTSTRAP_BULK
	chroot_umounts
	export LC_ALL=$CURRENT_LC_ALL
	export LANG=$CURRENT_LANG
	echo "chroot: end preparation"
}

gen_repo_basename(){
	echo "filter_$(echo "${1}" |tr "/ " "_:")"
}

update_lists(){
	CURRENT_LC_ALL="$LC_ALL"
	CURRENT_LANG="$LANG"
	export LC_ALL=C
	export LANG=C
	APT_CMD="chroot $CHROOT_DIR apt-get --allow-unauthenticated -ysV "
	chroot_mounts
	INST_REG_EX="^Inst \([^[:blank:]]\+\) (\([^[:blank:]]\+\) \([^[:blank:]]\+\))"
	TMP_FILE="$(tempfile)"
	for s in $SEED_LIST ; do
		echo "Processing seed: $s"
		meta="$(sed -ne "/^$s /s%^.* %%p" metapackage-map)"
		if [ "$meta" ] && [ "${meta%%-*}" != "exclude" ] ; then
			echo "   Simulate installation of metapackage $meta"
			$APT_CMD --install-recommends install $meta |sed -ne "/$INST_REG_EX/{s%$INST_REG_EX%\3 \1 \2%;p}" >> $TMP_FILE
		else
			for f in "$s-$CURRENT_ARCH" "$s-recommends-$CURRENT_ARCH" ; do
				echo "   Simulate installation of package list $f"
				if [ -r "$f" ] ; then
					cat "$f" |while read p ; do
						$APT_CMD install $p |sed -ne "/$INST_REG_EX/{s%$INST_REG_EX%\3 \1 \2%;p}" >> $TMP_FILE
					done
				fi
			done
		fi
	done
	echo "processing files"
	LISTS_DIR="$(mktemp -d)"
	# grep to discard packages from ubuntu
	cat "$DEBOOTSTRAP_BULK" "$TMP_FILE" |sort -u |grep -v "^Ubuntu:" |while read d p v; do
		BULK_REPO="$(chroot $CHROOT_DIR apt-cache madison $p |pcache_sed_repository "$p" "$v")"
		if [ "$BULK_REPO" ] ; then
			REPO_URL="${BULK_REPO% *}"
			REPO_DIS="${BULK_REPO#* }"
			REPO_FILE="${LISTS_DIR}/$(gen_repo_basename "${BULK_REPO}").list"
			URL_FILE="${REPO_FILE%.list}.url"
			if [ ! -r "$URL_FILE" ] ; then
				echo "# -> $REPO_URL $REPO_DIS" > "$URL_FILE"
				:> "$REPO_FILE"
			fi
			echo "$p" >> "$REPO_FILE"
		fi
	done
	echo "processing Ubuntu packages"
	# TODO: generate list files for ubuntu packages
	for REPO_DIS in $(sed -ne "/^Ubuntu:/{s% .*$%%;s%^.*/%%;p}" "$TMP_FILE" |sort -u) ; do
		REPO_FILE="${LISTS_DIR}/$(gen_repo_basename "$UBUNTU_MIRROR $REPO_DIS").list"
		URL_FILE="${REPO_FILE%.list}.url"
		if [ ! -r "$URL_FILE" ] ; then
			echo "# -> $UBUNTU_MIRROR $REPO_DIS" > "$URL_FILE"
			:> "$REPO_FILE"
		fi
		sed -ne "\%^Ubuntu:[^\/]*/$REPO_DIS %{s%^[^[:blank:]]\+[[:blank:]]%%;s%[[:blank:]].*$%%;p}" "$TMP_FILE" >> "$REPO_FILE"
	done
	#	
	cp $FULL_LIST "$LISTS_DIR/old-list.bulk"
	:> $FULL_LIST
	for f in $(ls -1 $LISTS_DIR/*.list 2>/dev/null |sort) ; do
		F="${f%.list}.url"
		cat "$F" >> $FULL_LIST
		sort -u "$f" >> $FULL_LIST
	done
	echo "update-lists terminado. $FULL_LIST actualizado"
	if diff -q >/dev/null $FULL_LIST "$LISTS_DIR/old-list.bulk" ; then
		echo "No se encontraron diferencias"
	else
		echo "Se encontraron cambios"
	fi
	rm -f "$TMP_FILE"
	rm -fr "$LISTS_DIR"
	chroot_umounts
	export LC_ALL=$CURRENT_LC_ALL
	export LANG=$CURRENT_LANG

}

split_lists(){
	nfirst=""
	for f in filter-lists/*.bulk ; do
		F="$(basename "$f" .bulk)"
		F_ARCH="${F##*-}"
		LINE_LIST="$(grep -n '^#' $f |cut -f 1 -d :)"
		for n in $LINE_LIST '$' ; do
			if  [ "$nfirst" ] ;then
				REPO_URL="$(sed -ne "${nfirst}{s%^# -> %%;p}" "$f")"
				FILENAME="$(gen_repo_basename "$REPO_URL")"
				nlast="$n"
				sed -ne "${nfirst},${nlast}{/^#.*$/d;p}" "$f" > "$CHROOT_DIR/${FILENAME}-$F_ARCH.list"
				echo "$REPO_URL" > "$CHROOT_DIR/${FILENAME}-$F_ARCH.url"
			fi
			nfirst="$n"
		done
	done

}

# pkg_cache functions
# -------------------

pcache_get_candidate(){
	LANG=C apt-cache policy "$1" |sed -ne "/^[[:blank:]]*Candidate:/{s%^[[:blank:]]*Candidate:[[:blank:]]*%%;p}"
}

pcache_show_field(){
	local PKG_FIELD="$1"
	local PKG_NAME="$2"
	local PKG_VERSION="$3"
	[ "$PKG_VERSION" ] || PKG_VERSION="$(pcache_get_candidate "$PKG_NAME")"
	LANG=C apt-cache show "$PKG_NAME" |sed -ne "/^Version:[[:blank:]]*$PKG_VERSION/,/^$/{/^$PKG_FIELD:[[:blank:]]*/s%^$PKG_FIELD:[[:blank:]]*%%p}" |tr "," "\n"
}

pcache_sed_repository(){
	local PKG_NAME="$1"
	local PKG_VERSION="$2"
	[ "$PKG_VERSION" ] || PKG_VERSION="$(pcache_get_candidate "$PKG_NAME")"
	REG_EX="^.*|[[:blank:]]*$PKG_VERSION[[:blank:]]*|[[:blank:]]*\([^[:blank:]]\+\)[[:blank:]]\+\([^\/]\+\).*[[:blank:]]Packages$"
	#apt-cache madison "$PKG_NAME" |sed -ne "/|[[:blank:]]\+$PKG_VERSION[[:blank:]]\+|.* Packages$/{s%^.*|[[:blank:]]*%%;s%[[:blank:]]*Packages$%%;p}"
	sed -ne "/$REG_EX/{s%$REG_EX%\1 \2%;p}" |head -1
}

pcache_show_repository(){
	local PKG_NAME="$1"
	local PKG_VERSION="$2"
	[ "$PKG_VERSION" ] || PKG_VERSION="$(pcache_get_candidate "$PKG_NAME")"
	REG_EX="^.*|[[:blank:]]*$PKG_VERSION[[:blank:]]*|[[:blank:]]*\([^[:blank:]]\+\)[[:blank:]]\+\([^\/]\+\).*[[:blank:]]Packages$"
	#apt-cache madison "$PKG_NAME" |sed -ne "/|[[:blank:]]\+$PKG_VERSION[[:blank:]]\+|.* Packages$/{s%^.*|[[:blank:]]*%%;s%[[:blank:]]*Packages$%%;p}"
	apt-cache madison "$PKG_NAME" |sed -ne "/$REG_EX/{s%$REG_EX%\1 \2%;p}" |head -1
}

pcache_get_depends(){
	pcache_show_field "Depends" "$1" "$2"| sed -e "s%^[[:blank:]]*%%"
}

pcache_get_recommends(){
	pcache_show_field "Recommends" "$1" "$2"| sed -e "s%^[[:blank:]]*%%"

}

pcache_get_suggests(){
	pcache_show_field "Suggests" "$1" "$2"| sed -e "s%^[[:blank:]]*%%"

}

pcache_list(){
	local PKG_NAME="$1"
	local PKG_VERSION="$2"
	[ "$PKG_VERSION" ] || PKG_VERSION="$(pcache_get_candidate "$PKG_NAME")"
        pcache_show_field "Depends" "$PKG_NAME" "$PKG_VERSION"| sed -e "s%^[[:blank:]]*%%"
        pcache_show_field "Recommends" "$PKG_NAME" "$PKG_VERSION"| sed -e "s%^[[:blank:]]*%(%;s%[[:blank:]]*$%)%"
	pcache_show_field "Suggests" "$PKG_NAME" "$PKG_VERSION"| sed -e "s%^[[:blank:]]*%((%;s%[[:blank:]]*$%))%"
}

# -------------------


usage(){
	die "Usage: $(basename "$0") {configure-sources|update-seeds|update-metapackages|debootstrap|prepare-chroot|update-lists|split-lists|clean} [--target-dir=<DIRNAME>]"
}

# variables
. ./aurex-meta.conf
SOURCES_BASEDIR=./sources
SOURCES_REGEX="^deb[[:blank:]]\+\([^[:blank:]]\+\)[[:blank:]]\+\([^[:blank:]]\+\)[[:blank:]]\+\(.*\)$"

# TODO: Find a lesser dirty wat to get current debian architecture name
CURRENT_ARCH=$(dpkg -s coreutils |sed -ne "/^Architecture:/s%^.* %%p")
DEBOOTSTRAP_BULK="filter-lists/debootstrap-$CURRENT_ARCH.pkgs"
FULL_LIST="filter-lists/full-list-$CURRENT_ARCH.bulk"

CHROOT_SOURCES_LIST=""
# main

for o in "$1" "$2" ; do
	if [ "$o" ] ; then
		if [ "${o%%=*}" = "--target-dir" ] ; then
			CHROOT_DIR="${o#*=}"
		else
			[ "$ACTION" ] || ACTION="$o"
		fi
	fi
done

case "$ACTION" in
	configure-sources)
		configure_sources
		;;
	clean)
		clean_sources
		rm -f update.cfg
		;;
	update-seeds)
		update_seeds
		;;
	prepare-chroot)
		[ "$CHROOT_DIR" ] || die "prepare-chroot requires --target-dir=<DIRNAME> option"
		configure_chroot
		test_debootstrap
		prepare_chroot
		;;
	update-metapackages)
		configure_sources
		germinate-update-metapackage --multiple-dists
		;;
	debootstrap)
		[ "$CHROOT_DIR" ] || die "debootstrap requires --target-dir=<DIRNAME> option"
		[ $(id -u) -eq 0 ] || die "root privileges required"
		configure_chroot
		do_debootstrap
		prepare_chroot
		;;
	update-lists)
		[ $(id -u) -eq 0 ] || die "root privileges required"
		[ -r "metapackage-map" ] || die "metapackage-map file not found"
		configure_chroot
		if [ -z "$CHROOT_DIR" ] ; then
			CHROOT_DIR="$(mktemp -d)"
			CLEAN_DIR="$CHROOT_DIR"
			do_debootstrap
		fi
		test_debootstrap
		prepare_chroot
		update_lists
		[ -z "$CLEAN_DIR" ] || rm -rf "$CLEAN_DIR"
		;;
	split-lists)
		[ "$CHROOT_DIR" ] || die "split-lists requires --target-dir=<DIRNAME> option"
		[ -d "$CHROOT_DIR" ] || die "$CHROOT_DIR is not a valid directory"
		split_lists
		;;
	*)
		usage
		;;
esac
exit 0

