#!/bin/sh
# -------
# File:        aurex-translive
# Description: Simple script to transmute Ubuntu live cds
#              the script works in current directory (like
#              lliurex-livebuilder)
# Author:      Luis Antonio Garcia Gisbert <luisgg@gmail.com> 
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along 
# with this program; if not, write to the Free Software Foundation, Inc., 
# 51 Franklin St, Fifth Floor, Boston MA 02110-1301 USA
# --------

# funcs
# -----

die(){
	echo "$1" >&2
	iso_umount 2>/dev/null
	[ ! -d "$SOURCE_DIR" ] || rmdir --ignore-fail-on-non-empty "$SOURCE_DIR" || true
	exit 1
}

usage(){
	die "Usage: $(basename "$0") [options] {copy|unsquash|update-chroot|pre-build|squash|geniso|post-build|build}\n\
       Options:  --no-interactive\n\
                 --iso-file=ISOFILE\n\
                 --pkg-list=PKG_LIST_FILE"
}

test_dir(){
	for d in $DIR_LIST ; do
		[ -d "$d" ] || die "Unable to find directory: \"$d\""
	done
	for f in $FILE_LIST $* ; do
		[ -e "$f" ] || die "Unable to find file: \"$f\""
	done
}

iso_test(){
	[ "$SOURCE_ISO" ] && [ -r "$SOURCE_ISO" ] || die "Invalid iso file: \"$SOURCE_ISO\""
}

iso_mount(){
	mount -o loop $SOURCE_ISO $SOURCE_DIR
}

iso_umount(){
	umount $SOURCE_DIR || true
	[ ! -d "$SOURCE_DIR" ] || rmdir --ignore-fail-on-non-empty "$SOURCE_DIR" || true
}

iso_copy(){
	mkdir -p ./live-cd
	rsync --exclude=/casper/filesystem.squashfs -a --delete $SOURCE_DIR/ ./live-cd
}

iso_unsquash(){
	rm -fr ./chroot ./unsquashfs
	unsquashfs $SOURCE_DIR/casper/filesystem.squashfs
	mv squashfs-root chroot
}

squash_gen(){
	rm -f ./live-cd/casper/filesystem.squashfs
	mksquashfs chroot ./live-cd/casper/filesystem.squashfs
}

chroot_translive_vars(){
	# $1: {create|delete}
	# $2: {build-mode|live-mode}
	TRANS_DIR="/etc/aurex/profile.d"
	if [ "$1" = "delete" ] ; then
		rm -f chroot/$TRANS_DIR/aurex-translive-vars.sh
		return 0
	fi
	mkdir -p chroot/$TRANS_DIR
	if [ "$2" = build-mode ] ; then
		UBUNTU_FORCEMIRROR="${UBUNTU_MIRROR_BUILD:-$UBUNTU_MIRROR}"
		AUREX_FORCEMIRROR="${AUREX_MIRROR_BUILD:-$AUREX_MIRROR}"
	else
		UBUNTU_FORCEMIRROR="${UBUNTU_MIRROR_LIVE:-$UBUNTU_MIRROR}"
		AUREX_FORCEMIRROR="${AUREX_MIRROR_LIVE:-$AUREX_MIRROR}"
	fi
	cat <<EOF > chroot/$TRANS_DIR/aurex-translive-vars.sh
UBUNTU_FORCEMIRROR="$UBUNTU_FORCEMIRROR"
AUREX_FORCEMIRROR="$AUREX_FORCEMIRROR"
EOF

}

chroot_config(){
	chroot_translive_vars create build-mode
	# aurex-transmute install "a la vasca way ..."
	rsync -a /usr/share/aurex-translive/chroot/ chroot/
	if [ "$PKG_LIST" ] && [ -r "$PKG_LIST" ] ; then
		mkdir -p $CHROOT_PKG_DIR
		cp "$PKG_LIST" "$CHROOT_PKG_DIR/aurex-translive.pkg"
	fi
	for f in $HOST_COPY_FILES ; do
		if [ -e chroot/$f ] && [ ! -e chroot/$f.aurex ] ; then
			 mv chroot/$f chroot/$f.aurex
		fi
		cp $f chroot/$f
	done
	for f in $CHROOT_DIVERT_LIST ; do
		if [ -e "chroot/$f" ] ; then
			chroot chroot dpkg-divert --package aurex-translive --rename --quiet --add --divert ${f}.translive-divert ${f} || true
			ln -s /bin/true "chroot/$f"
		fi
	done
}

chroot_unconfig(){
	for f in $HOST_COPY_FILES ; do
		rm chroot/$f
		[ ! -e chroot/$f.aurex ] || mv chroot/$f.aurex chroot/$f
	done

        chroot_translive_vars create live-mode
	chroot chroot aurex-transmute transmute sources
        chroot_translive_vars delete

	rm -f chroot/$TRANS_DIR/aurex-translive-vars.sh
	rm -fr "$CHROOT_PKG_DIR"
	export HOME=/root
	export LC_ALL=C
	for f in $CHROOT_DIVERT_LIST ; do
		if [ -e "chroot/$f.translive-divert" ] ; then
			rm -f "chroot/$f"
			chroot chroot dpkg-divert --package aurex-translive --rename --quiet --remove ${f} || true
		fi
	done
	chroot chroot apt-get clean || true
	rm -rf chroot/tmp/* || true

}

chroot_interactive(){
	export HOME=/root
	export LC_ALL=C
	echo ">>>>>>> INTERACTIVE MODE <<<<<<<<"
	echo ">>>>>>> type 'exit' to end <<<<<<<<" 
	chroot chroot
}

chroot_mounts(){
	mount --bind /dev "chroot/dev"
	mount --bind /dev/pts "chroot/dev/pts"
	mount --bind /proc "chroot/proc"
	mount --bind /sys "chroot/sys"

}

chroot_umounts(){
	umount -l "chroot/dev/pts" || true
	umount -l "chroot/dev" || true
	umount -l "chroot/proc" || true
	umount -l "chroot/sys" || true
}

kernel_purge(){
	KERNEL_GENERIC="$(chroot chroot dpkg -l |cut -f 3 -d " " |grep "^linux-image-.*-generic$" |tr "\n" " ")"
	HEADER_GENERIC="$(chroot chroot dpkg -l |cut -f 3 -d " " |grep "^linux-headers-.*-generic$" |tr "\n" " ")"
	HEADER_PURGE="$HEADER_GENERIC"
	for k in $HEADER_GENERIC ; do
		HEADER_PURGE="$HEADER_PURGE ${k%-generic}"
	done
	chroot chroot apt-get --force-yes -y --allow-unauthenticated remove --purge $KERNEL_GENERIC $HEADER_PURGE
}

chroot_update(){
	export HOME=/root
	export LC_ALL=C
	chroot chroot aurex-transmute --no-packages transmute || true
	chroot chroot apt-get update
	chroot chroot apt-get --force-yes -y --allow-unauthenticated dist-upgrade || true
	chroot chroot apt-get --force-yes -y --allow-unauthenticated install $LIVE_PKG_LIST || true
	kernel_purge
}

chroot_test(){
	[ -d chroot ] || die "Unable to find directory chroot"
}

test_id(){
	[ $(id -u) -eq 0 ] || return 1
	return 0
}

iso_gen(){
	chroot chroot dpkg-query -W --showformat='${Package} ${Version}\n' > live-cd/casper/filesystem.manifest
	cp live-cd/casper/filesystem.manifest live-cd/casper/filesystem.manifest-desktop
	sed -i '/ubiquity/d;/casper/d' live-cd/casper/filesystem.manifest-desktop

	printf $(du -sx --block-size=1 chroot | cut -f1) > live-cd/casper/filesystem.size

	VMLINUZ_FILE="$(ls -1 chroot/boot/vmlinuz-* 2>/dev/null |sort |tail -1)"
	if [ "$VMLINUZ_FILE" ] && [ -r "$VMLINUZ_FILE" ] ; then
		VMLINUZ_VERSION="${VMLINUZ_FILE#*vmlinuz-}"
		INITRD_FILE="chroot/boot/initrd.img-$VMLINUZ_VERSION"
		cp "$VMLINUZ_FILE" live-cd/casper/vmlinuz
		cp "$INITRD_FILE" live-cd/casper/initrd.lz
	fi
	ISO_ARCH="$(chroot chroot dpkg --print-architecture)"
	DISK_NAME="$VOLUME_LABEL \"Lucid\" - Release $ISO_ARCH"
	echo "$DISK_NAME ($(date "+%Y%m%d.%H%M%S"))" > live-cd/.disk/info
	sed -i -e "/^#define DISKNAME/s%^.*%#define DISKNAME  $DISK_NAME%" live-cd/README.diskdefines

	rsync -r /usr/share/translive/isolinux/ live-cd/isolinux/
	SPLASH_IMAGE="/usr/share/pixmaps/aurex/livedesktop-$ISO_ARCH.png"
	[ ! -r "$SPLASH_IMAGE" ] || convert_to_rle "$SPLASH_IMAGE" > live-cd/isolinux/aurex.rle
	
	LABEL_LIST="$(list_labels live-cd/isolinux/text.cfg)"
	CFG_FILE="live-cd/isolinux/isolinux.cfg"
	SAFE_BOOT="noapic noapm nodma nomce nolapic nosmp vga=normal"
	for l in $LABEL_LIST ; do
		echo "LABEL $l" >> $CFG_FILE
		get_label "$l" live-cd/isolinux/text.cfg >> $CFG_FILE
		case "$l" in
			live)
				echo "LABEL 1" >> $CFG_FILE
				get_label "$l" live-cd/isolinux/text.cfg >> $CFG_FILE
				echo "LABEL 3" >> $CFG_FILE
				get_label "$l" live-cd/isolinux/text.cfg |sed -e "/^[[:blank:]]*append[[:blank:]]/s%--.*$%$SAFE_BOOT --%" >> $CFG_FILE
				;;
			live-install)
				echo "LABEL 2" >> $CFG_FILE
				get_label "$l" live-cd/isolinux/text.cfg >> $CFG_FILE
				;;
		esac
	done

	rm -f live-cd/md5sum.txt
	( cd live-cd; find -type f -print0 | sudo xargs -0 md5sum | grep -v isolinux/boot.cat | sudo tee md5sum.txt ; )
	ISO_NAME="$BASE_ISONAME-$(chroot chroot dpkg --print-architecture).iso"
	mkisofs -D -r -V "$VOLUME_LABEL" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o "$ISO_NAME" live-cd
}

get_label(){
	LABEL="$1"
	LOCALE_SETTINGS="console-setup/layoutcode=es locale=es_ES"
	sed -ne "/^label[[:blank:]]\+$LABEL$/,/^label/{/^label/d;/^[[:blank:]]*append[[:blank:]]/s%--.*$%$LOCALE_SETTINGS --%;p}" "$2"
}

list_labels(){
	sed -ne "/^label/s%^label[[:blank:]]\+\([^[:blank:]]\+\).*$%\1%p" "$1"
}

convert_to_rle(){
	local TMP_FILE
	TMP_FILE="$(tempfile)"
	convert -depth 8 -colors 16 "$1" "ppm:${TMP_FILE}"
	# generate rle to stdout
	ppmtolss16 < "$TMP_FILE"
	# "#000000=0" "#ffffff=7" ?
	rm -f "$TMP_FILE"
}

# vars
# ----

HOST_COPY_FILES="/etc/resolv.conf"
CHROOT_DIVERT_LIST="/usr/sbin/invoke-rc.d /usr/sbin/lpadmin"
INTERACTIVE_MODE="Y"
PKG_LIST="./translive.pkg"
ACTION=""
SOURCE_DIR="$(mktemp -d)"
SOURCE_ISO=""
DIR_LIST="chroot live-cd live-cd/casper live-cd/isolinux"
FILE_LIST="live-cd/casper/vmlinuz live-cd/casper/initrd.lz live-cd/.disk/info"
EXTRA_LIST="live-cd/casper/filesystem.squashfs live-cd/casper/filesystem.manifest live-cd/casper/filesystem.manifest-desktop live-cd/casper/filesystem.size live-cd/md5sum.txt"

CHROOT_PKG_DIR="chroot/usr/share/aurex-transmute/translive/packages"
LIVE_PKG_LIST="aurex-ubiquity-transmute aurex-ubiquity-theme"
# main
# ----

. /etc/aurex-translive/aurex-translive.conf 
if [ -r ./aurex-translive.conf ] ; then
	echo "Using local configuration in ./aurex-translive.conf"
	. ./aurex-translive.conf
fi

[ "$1" ] || usage
test_id || die "root privileges required"

for o in "$@" ; do
	case "$o" in 
		--no-interactive)
			INTERACTIVE_MODE="N"
			;;
		--iso-file=*)
			SOURCE_ISO="${o#--iso-file=}"
			;;
		--pkg-list=*)
			PKG_LIST="${o#--pkg-list=}"
			;;
		*)
			 [ "$ACTION" ] || ACTION="$o"
			;;
	esac
done

[ "$ACTION" ] || usage

case "$ACTION" in
	copy)
		iso_test
		iso_mount
		iso_copy
		iso_umount
		;;
	unsquash)
		iso_test
		iso_mount
		iso_unsquash
		iso_umount
		;;
	update-chroot)
		chroot_test
		chroot_config
		chroot_mounts
		chroot_update
		[ "$INTERACTIVE_MODE" = "N" ] || chroot_interactive
		chroot_unconfig
		chroot_umounts
		;;
	pre-build)
		iso_test
		iso_mount
		iso_copy
		iso_unsquash
		iso_umount
		chroot_config
		chroot_mounts
		chroot_update
		[ "$INTERACTIVE_MODE" = "N" ] || chroot_interactive
		chroot_unconfig
		chroot_umounts
		;;
	squash)
		chroot_test
		squash_gen
		;;
	geniso)
		test_dir $EXTRA_LIST
		iso_gen
		;;
	post-build)
		test_dir
		chroot_config
		chroot_mounts
                chroot_update
                [ "$INTERACTIVE_MODE" = "N" ] || chroot_interactive
                chroot_unconfig
		chroot_umounts
		squash_gen
		iso_gen
		;;
	build)
		iso_test
		iso_mount
		iso_copy
		iso_unsquash
		iso_umount
		chroot_config
		chroot_mounts
		chroot_update
		[ "$INTERACTIVE_MODE" = "N" ] || chroot_interactive
		chroot_unconfig
		chroot_umounts
		squash_gen
		iso_gen
		;;
	*)
		usage
		;;
esac

exit 0
