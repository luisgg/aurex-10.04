#!/bin/sh
# --------
# File:		wbackup (aka backup-strato)
# Description:	simple script to backup/synchronize web pages and mysql
# Authors:	Luis Garcia Gisbert <luisgg@gmail.com>
#		Sandra Villanueva Gavino <savilga@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along 
# with this program; if not, write to the Free Software Foundation, Inc., 
# 51 Franklin St, Fifth Floor, Boston MA 02110-1301 USA
# --------

# --------
# Functions
# --------

die(){
	$LOGGER_CMD "ERROR: $1"
	$LOGGER_CMD "BACKUP ABORTED"
	exit 1
}

mysql_dump(){
	mkdir -p "$1/mysql"
	ssh ${SSH_USER}@${SSH_HOST} $MYSQLDUMP_CMD > "$1/mysql/mysql.dump" || return 1
	return 0
}

web_backup(){
	mkdir -p "$1/$WEB_LOCAL_DIR"
	if [ -d "$BACKUP_BASE_DIR/$LAST_BACKUP/$WEB_LOCAL_DIR" ] ; then
		# copy last backup to current dir
		rsync -rlpt "$BACKUP_BASE_DIR/$LAST_BACKUP/$WEB_LOCAL_DIR/" "$1/$WEB_LOCAL_DIR/" || return 1
	fi
	rsync -rlpt ${SSH_USER}@${SSH_HOST}:$WEB_REMOTE_DIR/ "$1/$WEB_LOCAL_DIR/" || return 1
	return 0
}

update_last_link(){
	( cd "$BACKUP_BASE_DIR" ; rm -f "$LAST_BACKUP" ; ln -s "$TIMESTAMP" "$LAST_BACKUP" ; )
	return 0
}


# --------
# vars
# --------

COMMON_FILE="/usr/share/wbackup/wbackup-common"
[ -r "$COMMON_FILE" ] || die "Unable to read $COMMON_FILE"
. $COMMON_FILE

# --------
# main
# --------

WB_SITES="$(find "$WB_CONF" -xtype f -name "*conf")"
for WB_SITE in $WB_SITES ; do
	# reset values for required variables
	SSH_HOST=""
	SSH_USER=""
	MYSQLDUMP_CMD="mysqldump --opt"
	BACKUP_NAME="$(basename "$WB_SITE" ".conf" )"
	WEB_REMOTE_DIR=""
	WEB_LOCAL_DIR=""
	LAST_BACKUP="LAST-BACKUP"
	
	# set a common defaul to for MYSQL_HOST
	MYSQL_HOST="localhost"
	#SSH_HOST="ssh.strato.de"
	#SSH_USER="ausiasmarch.es"
	#MYSQLDUMP_CMD="mysqldump --opt -h rdbms"
	#WEB_REMOTE_DIR="portal"
	#WEB_LOCAL_DIR="portal"
	# source credentials file
	[ -r "$WB_SITE" ] || die "$WB_SITE not found"
	. $WB_SITE

	LOGGER_CMD="logger -t wbackup-${BACKUP_NAME} -s"
	BACKUP_BASE_DIR="$WB_BASE_DIR/wbackup-${BACKUP_NAME}"

	$LOGGER_CMD "BACKUP STARTED"

	MYSQLDUMP_CMD="$MYSQLDUMP_CMD -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASS $MYSQL_DB"

	# do the backup
	TIMESTAMP="$(date "+%Y-%m-%d_%H%M%S")"
	BACKUP_DIR="$BACKUP_BASE_DIR/$TIMESTAMP"

	# test if the public key was copyed to remote host
	copy_id_test || die "Public key was not copied to remote host. May be you need to run wb-setup script ..."

	mkdir -p "$BACKUP_DIR"

	# verify required variables
	if [ -z "$MYSQL_USER" ] || [ -z "$MYSQL_PASS" ] || [ -z "$MYSQL_DB" ] || [ -z "$MYSQL_HOST" ] ; then
		$LOGGER_CMD "Skipping mysql backup (no variables found)"
	else
		$LOGGER_CMD "Starting mysql backup"
		if mysql_dump "$BACKUP_DIR" ; then
			$LOGGER_CMD "Succesfully mysql backup"
		else
			$LOGGER_CMD "mysql backup finished with some errors"
		fi
	fi
	[ "$WEB_LOCAL_DIR" ] || WEB_LOCAL_DIR="$WEB_REMOTE_DIR"
	if [ -z "$WEB_REMOTE_DIR" ] || [ -z "$WEB_LOCAL_DIR" ] ; then
		$LOGGER_CMD "Skipping web backup (no variables found)"
	else
		web_backup "$BACKUP_DIR" || die "web backup FAILED"
	fi

	update_last_link "$BACKUP_DIR"

	$LOGGER_CMD "BACKUP COMPLETED"
done

