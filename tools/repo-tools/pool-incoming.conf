# start/stop multiple inoticoming instances from a simple upstart service job

description	"launch inoticoming for processing pool incoming dirs"

start on filesystem
stop on runlevel [016] 

# Variables
# ---------

# inoticoming logs and pids dirs
env INOTI_LOGS="/var/log/pool-incoming"
env INOTI_PIDS="/var/run/pool-incoming"

# reprepro settings
env REPR_RULE="incoming"
env REPR_BASEDIRS="/srv/repo/aurex"

# export all stuff
export INOTI_LOGS INOTI_PIDS REPR_RULE REPR_BASEDIRS

pre-start script
	# Override any value with /etc/defaults/pool-incoming
	[ ! -r "/etc/defaults/pool-incoming" ] || . /etc/defaults/pool-incoming

	# Create required dirs
	mkdir -p "$INOTI_LOGS" "$INOTI_PIDS"

	for d in $REPR_BASEDIRS ; do
		# Create required dirs
		mkdir -p "$INOTI_LOGS/$d" "$INOTI_PIDS/$d"

		# launch an inoticoming instance for directory '$d'
		# reprepro will use $REPR_RULE rule of the conf/incoming file

		inoticoming --logfile "$INOTI_LOGS/$d/incoming.log" --pid-file "$INOTI_PIDS/$d/inoticoming.pid" "$d/incoming" --suffix ".changes" --stderr-to-log --stdout-to-log --chdir "$d" /usr/share/repo-tools/incoming-hook-script {} \;
	
	done

end script

post-stop script
	# Override any value with /etc/defaults/pool-incoming
	[ ! -r "/etc/defaults/pool-incoming" ] || . /etc/defaults/pool-incoming

	for d in $REPR_BASEDIRS ; do
		PIDFILE="$INOTI_PIDS/$d/inoticoming.pid"
		if [ -r "$PIDFILE" ] ; then
			kill -9 $(cat "$PIDFILE") || true
			rm -f "$PIDFILE"
			# remove any leading / in pathname
			D="$(echo $d |sed -e "s%^/*%%")"
			cd "$INOTI_PIDS" && rmdir -p --ignore-fail-on-non-empty "$D" || true

		fi
	done	
end script

